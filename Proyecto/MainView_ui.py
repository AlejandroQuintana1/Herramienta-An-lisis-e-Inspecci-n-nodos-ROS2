# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainView.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import subprocess
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QSizePolicy,QTableWidgetItem,QTableWidget,QFileDialog
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox, QHBoxLayout

from Threads.TopicThread import TopicThread
from Threads.NodeThread import NodeThread
from Threads.ServiceThread import ServiceThread
from Threads.ParamThread import ParamThread
from Threads.PkgThread import PkgThread
from GestiónArchivos.datosFile import DatosFile


class Ui_MainWindow(object):

    def __init__(self):
        pass

    def setupUi(self, MainWindow):
        self.topic = TopicThread()
        self.node = NodeThread()
        self.service = ServiceThread()
        self.param = ParamThread()
        self.pkg = PkgThread()

        self.archivoGuardar = DatosFile()

        self.show = False
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(642, 582)
        MainWindow.setStyleSheet("background-color: rgb(246, 245, 244);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: rgb(222, 221, 218);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Buscador = QtWidgets.QFrame(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Buscador.sizePolicy().hasHeightForWidth())
    
        self.Buscador.setSizePolicy(sizePolicy)
        self.Buscador.setMaximumSize(QtCore.QSize(16777215, 55))
        self.Buscador.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Buscador.setLineWidth(1)
        self.Buscador.setMidLineWidth(0)
        self.Buscador.setObjectName("Buscador")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.Buscador)
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        self.Indice = QtWidgets.QComboBox(self.Buscador)
        self.Indice.setEditable(False)
        self.Indice.setPlaceholderText("")
        self.Indice.setObjectName("Indice")
        self.Indice.addItems(['Topic','Node','Service','Param','Pkgs'])
        self.Indice.currentIndexChanged.connect(self.update_indice2)

        self.horizontalLayout.addWidget(self.Indice)

        self.Indice2 = QtWidgets.QComboBox(self.Buscador)
        self.Indice2.setEditable(False)
        self.Indice2.setPlaceholderText("")
        self.Indice2.setObjectName("Indice2")
        self.Indice2.addItems(['List','Info','Echo'])
        
        self.horizontalLayout.addWidget(self.Indice2)
        
        self.textEdit = QtWidgets.QTextEdit(self.Buscador)
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout.addWidget(self.textEdit)

        self.pushButton = QtWidgets.QPushButton(self.Buscador)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.buscar)

        self.pushButtonClean = QtWidgets.QPushButton(self.Buscador)
        self.pushButtonClean.setObjectName("CleanButton")
        self.pushButtonClean.clicked.connect(self.clean)

        self.horizontalLayout.addWidget(self.pushButton)
        self.horizontalLayout.addWidget(self.pushButtonClean)
        self.verticalLayout_2.addWidget(self.Buscador)

        self.table = QtWidgets.QTableWidget(self.frame)
        self.table.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.table.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.table.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Expanding)
        self.verticalLayout_2.addWidget(self.table)
        self.verticalLayout.addWidget(self.frame)
        self.table.itemClicked.connect(self.handle_item_clicked)
        self.prueba = self.table.textElideMode()
        self.table.setTextElideMode(Qt.TextElideMode.ElideNone)
        self.prueba = self.table.textElideMode()
        MainWindow.setCentralWidget(self.centralwidget)

        self.textEdit2 = QtWidgets.QTextEdit(self.frame)
        self.textEdit2.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Expanding)   
        self.textEdit2.setMaximumSize(QtCore.QSize(16777215, 200))
        self.textEdit2.setStyleSheet("""
            QTextEdit {
                background-color: darkgrey;
                color: white;
                border: 1px solid black;
                selection-background-color: darkgrey;
                font-family: Monospace;
                border-radius: 5px;
            }
        """)
        self.textEdit2.hide()

        self.horizontalLayout2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout2.setObjectName("horizontalLayout2")

        self.horizontalLayout3 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout3.setObjectName("horizontalLayout3")

        self.checkCmd = QtWidgets.QCheckBox(self.frame)
        self.checkCmd.setObjectName("checkCmd")
        self.checkCmd.setContentsMargins(0,0,0,0)
        self.checkCmd.setStyleSheet("""
            QCheckBox {
                spacing: 10px;
                height: 30px;
                width: 30px;
            }
            QCheckBox::indicator{
                width: 25px;
                height: 25px;
            }
        """)

        self.labelCmd = QtWidgets.QLabel(self.frame)
        self.labelCmd.setText("Pantalla de ejecución directa a terminal:")

        self.labelT = QtWidgets.QLabel(self.frame)
        self.labelT.setText("Ejecutar el comando desde un terminal auxiliar -->")
        self.labelT.setContentsMargins(0,0,0,0)
        

        self.textEdit3 = QtWidgets.QTextEdit(self.frame)
        self.textEdit3.setSizePolicy(QSizePolicy.Expanding,QSizePolicy.Expanding)   
        self.textEdit3.setMaximumSize(QtCore.QSize(16777215, 50))
        self.textEdit3.setStyleSheet("""
            QTextEdit {
                background-color: black;
                color: white;
                border: 1px solid white;
                selection-background-color: darkgrey;
                font-family: Monospace;
                border-radius: 5px;
            }
        """)

        self.pushButtonCmd = QtWidgets.QPushButton(self.frame)
        self.pushButtonCmd.setObjectName("pushButtonCmd")
        self.pushButtonCmd.clicked.connect(self.ejecutarComando)

        self.pushButtonHide = QtWidgets.QPushButton(self.frame)
        self.pushButtonHide.setObjectName("pushButtonHide")
        self.pushButtonHide.clicked.connect(self.showTerminal)

        self.horizontalLayout2.addWidget(self.textEdit3)
        self.horizontalLayout2.addWidget(self.pushButtonCmd)
        self.horizontalLayout3.setSpacing(0)
        self.horizontalLayout3.addWidget(self.labelT)
        self.horizontalLayout3.addWidget(self.checkCmd)
        self.horizontalLayout3.addWidget(self.pushButtonHide)
        self.horizontalLayout3.setContentsMargins(0,0,0,0)
        
        self.verticalLayout_2.addWidget(self.labelCmd)
        self.verticalLayout_2.addLayout(self.horizontalLayout2)
        self.verticalLayout_2.addLayout(self.horizontalLayout3)
        self.verticalLayout_2.addWidget(self.textEdit2)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 642, 30))
        self.menubar.setMinimumSize(QtCore.QSize(0, 30))
        self.menubar.setObjectName("menubar")
        self.Archivo = QtWidgets.QMenu(self.menubar)

        self.Archivo.setMinimumSize(QtCore.QSize(30, 30))
        self.Archivo.setObjectName("Archivo")

        self.Ejecutar = QtWidgets.QMenu(self.menubar)

        self.Ejecutar.setMinimumSize(QtCore.QSize(30, 30))
        self.Ejecutar.setObjectName("Ejecutar")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.actionGuardarComandos = QtWidgets.QAction(MainWindow)
        self.actionGuardarComandos.setObjectName("actionGuardarComandos")
        self.actionGuardarComandos.triggered.connect(self.saveComandos)
        self.actionGuardarConsultas = QtWidgets.QAction(MainWindow)
        self.actionGuardarConsultas.setObjectName("actionGuardarConsultas")
        self.actionGuardarConsultas.triggered.connect(self.saveConsultas)
        self.actionGuardarTodo = QtWidgets.QAction(MainWindow)
        self.actionGuardarTodo.setObjectName("actionGuardarTodo")
        self.actionGuardarTodo.triggered.connect(self.saveTodo)

        self.rqt_graph = QtWidgets.QAction(MainWindow)
        self.rqt_graph.setObjectName("iniciarRqtGrath")
        self.rqt_graph.triggered.connect(self.ejecutarRqtGraph)

        self.rqt_plot = QtWidgets.QAction(MainWindow)
        self.rqt_plot.setObjectName("iniciarRqtPlot")
        self.rqt_plot.triggered.connect(self.ejecutarRqtPlot)

        self.rqt_console = QtWidgets.QAction(MainWindow)
        self.rqt_console.setObjectName("iniciarRqtConsole")
        self.rqt_console.triggered.connect(self.ejecutarRqtConsole)

        self.Archivo.addAction(self.actionGuardarComandos)
        self.Archivo.addAction(self.actionGuardarConsultas)
        self.Archivo.addAction(self.actionGuardarTodo)

        self.Ejecutar.addAction(self.rqt_graph)
        self.Ejecutar.addAction(self.rqt_plot)
        self.Ejecutar.addAction(self.rqt_console)

        self.menubar.addAction(self.Archivo.menuAction())
        self.menubar.addAction(self.Ejecutar.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Buscar"))
        self.pushButtonClean.setText(_translate("MainWindow", "Limpiar"))
        self.Archivo.setTitle(_translate("MainWindow", "Archivo"))
        self.Ejecutar.setTitle(_translate("MainWindow", "Ejecutar"))
        self.actionGuardarComandos.setText(_translate("MainWindow", "Guardar Comandos"))
        self.actionGuardarConsultas.setText(_translate("MainWindow", "Guardar Cosultals"))
        self.actionGuardarTodo.setText(_translate("MainWindow", "Guardar Todo"))
        self.rqt_graph.setText(_translate("MainWindow","rqt_graph"))
        self.rqt_plot.setText(_translate("MainWindow","rqt_plot"))
        self.rqt_console.setText(_translate("MainWindow","rqt_console"))
        self.pushButtonCmd.setText(_translate("MainWindow", "Ejecutar"))
        self.pushButtonHide.setText(_translate("MainWindow", "Mostrar"))

    def clean(self):
        self.clean_table()
        self.textEdit.clear()
        self.Indice.setCurrentIndex(0)
        self.Indice2.addItems(['List','Info','Echo'])
        self.table.setColumnCount(0)

    def buscar(self):
        cadena = "ros2 " + self.Indice.currentText() + " " + self.Indice2.currentText() + " " + self.textEdit.toPlainText()
        self.archivoGuardar.consultas.append(cadena)
        if self.Indice.currentIndex() == 0:
            if self.Indice2.currentIndex() == 0:
                self.iniciarTopic()
                self.textEdit.clear()
            if self.Indice2.currentIndex() == 1:
                if not self.textEdit.toPlainText():
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener un Topic del que sacar información',
                                      QMessageBox.Close, QMessageBox.Close) 
                else:
                    self.topic.topicInfo2(self.textEdit.toPlainText())
                    self.clean_table()
                    self.add_row_array(self.topic.salida_aux2)
            if self.Indice2.currentIndex() == 2:
                if not self.textEdit.toPlainText():
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener un Topic para ejecutarse',
                                      QMessageBox.Close, QMessageBox.Close) 
                else:
                    self.topic.topicEcho(self.textEdit.toPlainText())

        if self.Indice.currentIndex() == 1:
            if self.Indice2.currentIndex()  == 0:
                self.iniciarNode()
                self.textEdit.clear()
            if self.Indice2.currentIndex()  == 1:
                if not self.textEdit.toPlainText():
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener un Nodo del que sacar información',
                                      QMessageBox.Close, QMessageBox.Close) 
                else:
                    self.clean_table()
                    self.node.nodeInfo(self.textEdit.toPlainText())
                    self.table.setColumnCount(3)
                    self.table.setHorizontalHeaderLabels(['Atributo','Parametro','Valor'])
                    self.add_row_array(['Nodo',self.node.salida_aux[0],''])
                    self.node.salida_aux.remove(self.node.salida_aux[0])
                    for line in self.node.salida_aux:
                        if line == "  Subscribers:" or line == "  Publishers:" or line == "  Service Servers:" or line == "  Service Clients:" or line == "  Action Servers:" or line == "  Action Clients:": 
                            self.add_row_array([line,'',''])
                        else:
                            if line != "":
                                self.add_row_array(['',line.split(":")[0],line.split(":")[1]])
        if self.Indice.currentIndex() == 2:
            if self.Indice2.currentIndex() == 0:
                self.iniciarService()
            if self.Indice2.currentIndex() == 1:
                if not self.textEdit.toPlainText():
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener un Tipo de Servicio para buscar',
                                      QMessageBox.Close, QMessageBox.Close)
                else:
                    self.clean_table()
                    self.service.serviceFind(self.textEdit.toPlainText())
                    self.table.setColumnCount(2)
                    self.table.setHorizontalHeaderLabels(['Type','Service'])
                    for line in self.service.salida_aux2.split('\n'):
                        if line:
                            self.add_row_array([self.textEdit.toPlainText(),line])
            if self.Indice2.currentIndex() == 2:
                if not self.textEdit.toPlainText() or self.textEdit.toPlainText().count(" ") == 0:
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener Service al que llamar y su tipo. Separados por un espacio',
                                      QMessageBox.Close, QMessageBox.Close)
                else:
                    self.clean_table()
                    self.service.serviceCall(self.textEdit.toPlainText())
                    self.textEdit2.clear()
                    self.textEdit2.setPlainText(self.service.salida_aux3)
                    self.textEdit2.show()
                    self.iniciarService()
        if self.Indice.currentIndex() == 3:
            if self.Indice2.currentIndex() == 0:
                self.clean_table()
                self.iniciarParam()
            if self.Indice2.currentIndex() == 1:
                if not self.textEdit.toPlainText() or  self.textEdit.toPlainText().count(" ") == 0:
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener el Nodo y Param del que sacar informacion. Separados por un espacio',
                                      QMessageBox.Close, QMessageBox.Close)
                else:
                    self.clean_table()
                    self.param.paramGet(self.textEdit.toPlainText())
                    self.table.setColumnCount(4)
                    self.table.setHorizontalHeaderLabels(['Node','Param','Type','Value'])
                    self.add_row_array([self.textEdit.toPlainText().split(" ")[0],self.textEdit.toPlainText().split(" ")[1],self.param.salida_aux.split(" ")[0],self.param.salida_aux.split(":")[1]])
            if self.Indice2.currentIndex() == 2:
                if not self.textEdit.toPlainText() or  self.textEdit.toPlainText().count(" ") == 0:
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener el Nodo y Param del que sacar informacion. Separados por un espacio',
                                      QMessageBox.Close, QMessageBox.Close)
                else:
                    self.clean_table()
                    self.param.paramDescribe(self.textEdit.toPlainText())
                    self.table.setColumnCount(2)
                    self.table.setHorizontalHeaderLabels(['Info','Value'])
                    for line in self.param.salida_aux2.split("\n"):
                        self.add_row_array([line.split(" ")[0],line.split(" ")[1]])
            if self.Indice2.currentIndex() == 3:
                if not self.textEdit.toPlainText() or  self.textEdit.toPlainText().count(" ") == 0:
                    reply = QMessageBox.question(None, 'Aviso','El campo de texto debe contener el Nodo y Param del que sacar informacion. Separados por un espacio',
                                      QMessageBox.Close, QMessageBox.Close)
                else:
                    self.clean_table()
                    self.param.paramDelete(self.textEdit.toPlainText())
                    self.iniciarParam()

        if self.Indice.currentIndex() == 4:
            self.clean_table()
            self.iniciarPkg()

        tabla_str = ""
        row_count = self.table.rowCount()
        column_count = self.table.columnCount()
        for i in range(row_count):
            fila_str = "\t".join(self.table.item(i,j).text() for j in range(column_count))
            tabla_str += f"{fila_str}\n"
        if self.Indice.currentIndex() != 2 and self.Indice2.currentIndex() != 2:
            self.archivoGuardar.respuestas_tbl.append(tabla_str)


    def iniciarTopic(self):
        headerLabels = ['Elemento','Nombre','Tipo','Nº Publisher','Nº Subscriptor']
        self.table.setObjectName("tabla")
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(headerLabels)
        self.topic.run()
        respuesta = self.topic.salida
        if respuesta:
            self.clean_table()
            for line in respuesta.split('\n'):
                if line:
                    self.topic.topicInfo('ros2 topic info ' + line)
                    respuesta1 = self.topic.salida_aux
                    aux,aux1,aux2 = "","",""
                    count = 0
                    for line1 in respuesta1.split('\n'):
                        count = count + 1
                        if count == 1:
                            aux = line1.split(" ")[1]
                        if count == 2:
                            aux1 = line1.split(" ")[2]
                        if count == 3:
                            aux2 = line1.split(" ")[2]
                    text_array = ['ROS2 Topic',line,aux,aux1,aux2]
                    self.add_row_array(text_array)
        
    def iniciarNode(self):
        headerLabels = ['Elemento','Nombre']
        self.table.setObjectName("tabla")
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(headerLabels)
        self.node.run()
        respuesta = self.node.salida
        if respuesta:
            self.clean_table()
            for line in self.node.salida.split('\n'):
                if line:
                    text_array = ['ROS2 Node', line]
                    self.add_row_array(text_array)
    
    def iniciarService(self):
        headerLabels = ['Elemento','Nombre','Tipo']
        self.table.setObjectName("tabla")
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(headerLabels)
        self.service.run()
        respuesta = self.service.salida
        if respuesta:
            self.clean_table()
            for line in respuesta.split('\n'):
                if line:
                    self.service.serviceType(line)
                    respuesta1 = self.service.salida_aux
                    prueba = ['ROS2 Service',line.replace(' ',''),respuesta1.split(' ')[0]]
                    self.add_row_array(prueba)
    
    def iniciarParam(self):
        headerLabels = ['Nodo','Parametro']
        self.table.setObjectName("tabla")
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(headerLabels)
        self.param.run()
        respuesta = self.param.salida
        for line in respuesta.split('\n'):
            if line.endswith(':'):
                textArray = [line.split(':')[0],' ']
                self.add_row_array(textArray)
            else:
                self.add_row_array([' ',line.replace(' ','')])

    def iniciarPkg(self):
        headerLabels = ['Package','Executable','Prefix']
        self.table.setObjectName("tabla")
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(headerLabels)
        self.pkg.run()
        respuesta = self.pkg.salida
        for line in respuesta.split('\n'):
            self.pkg.pkgExecutable(line)
            respuesta1 = self.pkg.salida_aux
            self.pkg.pkgPrefix(line)
            respuesta2 = self.pkg.salida_aux1
            self.add_row_array([line,respuesta1,respuesta2])

    def add_row_array(self,text):
        rowPosition = self.table.rowCount()
        self.table.insertRow(rowPosition)
        count = 0
        for aux in text:
            item = QTableWidgetItem(aux)
            self.table.setItem(rowPosition,count,QTableWidgetItem(aux))
            count = count + 1
        self.table.resizeColumnsToContents()

    def clean_table(self):
        self.table.setRowCount(0)

    def handle_item_clicked(self,item):
        text1 = item.text()
        column_index = item.column()
        if column_index == 0 or column_index == 1 or column_index == 2:
            self.textEdit.setPlainText(self.textEdit.toPlainText() + " " + f"{text1}")
        self.Indice2.setCurrentIndex == 1

    def update_indice2(self):
        current_index = self.Indice.currentIndex()
        if current_index == 0:
            self.Indice2.clear()
            self.Indice2.addItems(['List','Info','Echo'])
        if current_index == 1:
            self.Indice2.clear()
            self.Indice2.addItems(['List','Info'])
        if current_index == 2:
            self.Indice2.clear()
            self.Indice2.addItems(['List','Find','Call'])
        if current_index == 3:
            self.Indice2.clear()
            self.Indice2.addItems(['List','Get','Describe','Delete'])
        if current_index == 4:
            self.Indice2.clear()
            self.Indice2.addItems(['List'])

    def ejecutarComando(self):
        self.archivoGuardar.comandos.append(self.textEdit3.toPlainText())
        if self.checkCmd.isChecked():
            reply = QMessageBox.question(None, 'Aviso','Al seleccionar esta opcioón se desplegará una termianl en la que visualizar la ejecucion del comando. ¿Desea continuar? \n Recuerde que esta consulta no se podrá almacenar ',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                comand = 'gnome-terminal -- ' + self.textEdit3.toPlainText()
                proceso = subprocess.Popen(comand, shell=True)
                tiempo_limite = 10
                time.sleep(tiempo_limite)

                proceso.terminate()
        else:
            self.show = True
            self.pushButtonHide.setText("Ocultar")
            self.verticalLayout_2.addWidget(self.textEdit2)
            self.textEdit2.clear()
            self.textEdit2.show()
            try:
                salida = subprocess.check_output(self.textEdit3.toPlainText(),stderr=subprocess.STDOUT ,text=True,shell= True, universal_newlines= True)
                self.textEdit2.setPlainText(salida)
                self.archivoGuardar.respuestas_terminal.append(salida)
            except subprocess.CalledProcessError as e:
                self.textEdit2.setPlainText(e.output)
                self.archivoGuardar.respuestas_terminal.append(e.output)    

    def showTerminal(self):
        if self.show :
            self.show = False
            self.pushButtonHide.setText("Mostrar")
            self.textEdit2.hide()
        else:
            self.show = True
            self.pushButtonHide.setText("Ocultar")
            self.textEdit2.show()
    
    def saveConsultas(self):
        file_dialog = QFileDialog()
        file_name, _ = file_dialog.getSaveFileName(QtWidgets.QWidget(),"Guardar Como...","","Archivos de Texto(*.txt);;Todos los Archivos (*)")
        if file_name:
            self.archivoGuardar.saveConsultas(file_name)

    def saveComandos(self):
        file_dialog = QFileDialog()
        file_name, _ = file_dialog.getSaveFileName(QtWidgets.QWidget(),"Guardar Como...","","Archivos de Texto(*.txt);;Todos los Archivos (*)")
        if file_name:
            self.archivoGuardar.saveComandos(file_name)
    
    def saveTodo(self):
        file_dialog = QFileDialog()
        file_name, _ = file_dialog.getSaveFileName(QtWidgets.QWidget(),"Guardar Como...","","Archivos de Texto(*.txt);;Todos los Archivos (*)")
        if file_name:
            self.archivoGuardar.saveTodo(file_name)
    
    def ejecutarRqtGraph(self):
        reply = QMessageBox.question(None, 'Aviso','Se va a ejecutar: rqt_graph.\n ¿Desea continuar? ',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                salida = subprocess.check_output('rqt_graph',stderr=subprocess.STDOUT ,text=True,shell= True, universal_newlines= True)
            except subprocess.CalledProcessError as e:
                self.textEdit2.setPlainText(e.output)
    
    def ejecutarRqtPlot(self):
        reply = QMessageBox.question(None, 'Aviso','Se va a ejecutar: rqt_plot.\n ¿Desea continuar? ',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                salida = subprocess.check_output('ros2 run rqt_plot rqt_plot',stderr=subprocess.STDOUT ,text=True,shell= True, universal_newlines= True)
            except subprocess.CalledProcessError as e:
                self.textEdit2.setPlainText(e.output)
    
    def ejecutarRqtConsole(self):
        reply = QMessageBox.question(None, 'Aviso','Se va a ejecutar: rqt_console.\n ¿Desea continuar? ',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            try:
                salida = subprocess.check_output('ros2 run rqt_console rqt_console',stderr=subprocess.STDOUT ,text=True,shell= True, universal_newlines= True)
            except subprocess.CalledProcessError as e:
                self.textEdit2.setPlainText(e.output)